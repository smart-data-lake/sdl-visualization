env {
  SDL_HIVE_DB = lab_anabel
  SDL_HDFS_HOME_PATH = "hdfs://nameservice1/user/fbd_lab_anabel"
  SDL_SBB_ENV = Prod
  SDL_TEST_PREFIX = _
  SDL_HDFS_NAMESERVICE = nameservice1
  SDL_APP = anabel
  SDL_APP_OR_LAB = lab
  SDL_DTS = "20210127"
  SDL_LOADDATE = 20210127
  SDL_STAMMDATEN_GIT_URL = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel/raw/"
  SDL_AUTHORIZATION_HEADER = "Basic"
  //SDL_JDBC_CONNECTSTRING="(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=porasbbmgmscan.sbb.ch)(PORT=1551))(CONNECT_DATA=(SERVICE_NAME=OSB094I)))"
  SDL_JDBC_CONNECTSTRING = "(DESCRIPTION=(ADDRESS=(PROTOCOL=TCP)(HOST=porasbbselscan.sbb.ch)(PORT=1551))(CONNECT_DATA=(SERVICE_NAME=GS_ANABEL_ENTW)))"
  SDL_JDBC_USER = "GSU_ANABEL"
  SDL_JDBC_PW = "changeme"
  SDL_HDFS_TMP_PATH = /tmp/fbd_lab_anabel
  SDL_SOURCE = anabel
  SDL_COLLECT_METRICS = false
  SDL_NEIG_TARGET_DB = ${env.SDL_HIVE_DB}
  SDL_SPARK_SHUFFLE_PARTITIONS = 100
  SDL_SPARK_MAX_EXECUTORS = 5
  SDLRAW_ATL_EXECUTION_MODE = {type = FailIfNoPartitionValuesMode}
}

global {
  sparkOptions {
    "spark.sql.shuffle.partitions" = ${env.SDL_SPARK_SHUFFLE_PARTITIONS} // initial load: one year
    "hive.exec.max.dynamic.partitions" = 10000 // default of 1000 is too low for larger loads. Setting higher value by default.
    "spark.debug.maxToStringFields" = 1000 // used for stg_formation (large internal structure)
    "hive.exec.dynamic.partition" = true
    "hive.exec.dynamic.partition.mode" = nonstrict
    "spark.shuffle.service.enabled" = true
    "spark.rdd.compress" = true
    "spark.checkpoint.compress" = true
    "spark.sql.broadcastTimeout" = 600 // to avoid org.apache.spark.SparkException: Could not execute broadcast in 300 secs.
    "spark.sql.sources.partitionOverwriteMode" = dynamic
    // others
    "spark.sql.parquet.writeLegacyFormat" = true // to write parquet in legacy format for hive compatibility
    "spark.sql.broadcastTimeout" = 400
    // uncomment for local testing to improve performance
    // "spark.sql.shuffle.partitions" = 8
    // "spark.default.parallelism" = 8
  }
}

connections {
  anabelStageLayerConnection {
    type = HiveTableConnection
    db = ${shared.hive-db}
    path-prefix = ${shared.hdfs-home-path}"/stage/"
    acl = ${default.acl}
  }

  anabelAtlLayerConnection {
    type = HiveTableConnection
    db = ${shared.hive-db}
    path-prefix = ${shared.hdfs-home-path}"/atl/"
    acl = ${default.acl}
  }

  anabelNeigLayerConnection {
    type = HiveTableConnection
    db = ${shared.neig-target-db}
    path-prefix = ${shared.hdfs-home-path}"/neig/"
    acl = ${default.acl}
  }

  anabelRepLayerConnection {
    type = HiveTableConnection
    db = ${shared.hive-db}
    path-prefix = ${shared.hdfs-home-path}"/rep/"
    acl = ${default.acl}
  }

  anabelGenericLayerConnection {
    type = HiveTableConnection
    db = ${shared.hive-db}
    path-prefix = ${shared.hdfs-home-path} // subpath needs to be specified when using this connection
    acl = ${default.acl}
  }

  jdbcReportingConnection {
    type = JdbcTableConnection
    url = "jdbc:oracle:thin:@"${env.SDL_JDBC_CONNECTSTRING}
    authMode = {
      type = BasicAuthMode
      // TODO: ENV# does not work yet
      userVariable = "CLEAR#"${env.SDL_JDBC_USER}
      passwordVariable = "CLEAR#"${env.SDL_JDBC_PW}
    }
    driver = oracle.jdbc.driver.OracleDriver
    db = ${env.SDL_JDBC_USER}
  }

}

shared {
  application = anabel

  dataframe-options {
    cacheable = true
  }

  // TODO: Maby we can remove aclImpala, thanks to email from Ursin on 2022-01-05:
  // Auf der CDP werden die Zugriffe auf Hive Tabellen via Ranger gesteuert und nicht mehr via HDFS ACLs.
  aclImpala = {
    permission = "rwxr-x---t"
    acls = [{
      aclType = "group"
      name = "dl_sec_bd"${env.SDL_TEST_PREFIX}${env.SDL_APP_OR_LAB}"_anabel"
      permission = "r-x"
    }
      { // für direkten Zugriff auf stg_positionspunkt für impala (ANABEL-229)
        aclType = "user"
        name = "impala"
        permission = "r-x"
      }
    ]
  }

  hive-db = ${env.SDL_HIVE_DB}
  db = ${env.SDL_HIVE_DB}
  dfagis-db = app_datalake
  diamond-db = app_diamond
  uno-db = app_datalake
  dgp-db = app_datalake
  dinar-db = app_datalake
  neig-target-db = ${env.SDL_NEIG_TARGET_DB}
  rcsarchiv-db = app_datalake
  fos-db = app_datalake
  sbb-env = ${env.SDL_SBB_ENV}
  source = anabel
  hdfs-nameservice = ${env.SDL_HDFS_NAMESERVICE}
  hdfs-home-path = ${env.SDL_HDFS_HOME_PATH}
  hdfs-tmp-path = ${env.SDL_HDFS_TMP_PATH}
  dts = ${env.SDL_DTS}
  loaddate = ${env.SDL_LOADDATE}
  git-authentication = "Basic RlM0NTQwNjpNakEwTXpJek56QTNOamMwT3FSQTJkd0UvN0NhRFpBdDBqQjM2aTZCRkhudA=="
}

default {
  options = {
    dts = ${env.SDL_DTS},
    require-partitions-existing = true
  }

  acl = {
    permission = "rwxr-x---t"
    acls = [{
      aclType = "group"
      name = "dl_sec_bd"${env.SDL_TEST_PREFIX}${env.SDL_APP_OR_LAB}"_anabel"
      permission = "r-x"
    }]
  }

  hiveTable = {
    type = HiveTableDataObject
    table {
      db = ${shared.hive-db}
      name = "~{id}" // overwrite if name of table != dataObject name
    }
    partitions = []
  }

  hiveTableDtPartitioned = {
    type = HiveTableDataObject
    table {
      db = ${shared.hive-db}
      name = "~{id}"
    }
    partitions = [dt]
  }

  hiveRcsTableDtPartitioned = {
    type = HiveTableDataObject
    // In RCS fehlen einige Tage. Diese werden über clone-Tage behandelt und dürfen nicht zum Abbruch der Verarbeitung führen
    expectedPartitionsCondition = "elements['dt'] not in ('20121027','20130328','20131026','20160424','20160425','20160426','20160520','20160521','20160522','20160523')"
    table {
      db = ${shared.hive-db}
      name = "~{id}"
    }
    partitions = [dt]
  }

  tickTockHiveTableDtPartitioned = {
    type = TickTockHiveTableDataObject
    table {
      db = ${shared.hive-db}
      name = "~{id}"
    }
    partitions = [dt]
  }

  outputGeneric = {
    type = HiveTableDataObject
    connectionId = anabelGenericLayerConnection
    partitions = []
    numInitialHdfsPartitions = -1
    path = "/~{id}/data/"
    table {
      name = "~{id}"
    }
  }

  outputNeig = {
    type = TickTockHiveTableDataObject
    connectionId = anabelNeigLayerConnection
    partitions = []
    numInitialHdfsPartitions = -1
    table {
      name = "~{id}"
    }
  }

  outputRep = {
    type = TickTockHiveTableDataObject
    connectionId = anabelRepLayerConnection
    partitions = []
    numInitialHdfsPartitions = -1
    table {
      name = "~{id}"
    }
  }

  outputStage = {
    type = HiveTableDataObject
    connectionId = anabelStageLayerConnection
    partitions = [dt]
    numInitialHdfsPartitions = -1 // workaround to disable file size estimator for partitioned tables
    path = "/~{id}/data/"
    table {name = "~{id}"}
  }

  outputStageStammdaten = {
    type = HiveTableDataObject
    connectionId = anabelStageLayerConnection
    // keine Partitionierung nach DT
    numInitialHdfsPartitions = -1 // workaround to disable file size estimator for partitioned tables
    path = "/~{id}/data/"
    table {
      name = "~{id}"
    }
  }

  outputStageStammdatenTickTock = {
    type = TickTockHiveTableDataObject
    connectionId = anabelStageLayerConnection
    // keine Partitionierung nach DT
    numInitialHdfsPartitions = -1 // workaround to disable file size estimator for partitioned tables
    path = "/~{id}/data/"
    table {
      name = "~{id}"
    }
  }

  outputAtl = {
    type = HiveTableDataObject
    connectionId = anabelAtlLayerConnection
    partitions = [dt]
    numInitialHdfsPartitions = -1 // workaround to disable file size estimator for partitioned tables
    path = "/~{id}/data/" // Gemäss ANABEL Konvention, muss dieser Pfad aber überschrieben werden (kein atl_ im Pfad)
    table {
      name = "~{id}"
    }
  }

  outputAtlTickTock = {
    type = TickTockHiveTableDataObject
    connectionId = anabelAtlLayerConnection
    partitions = [dt]
    numInitialHdfsPartitions = -1 // workaround to disable file size estimator for partitioned tables
    path = "/~{id}/data/"
    table {
      name = "~{id}"
    }
  }

  actionStammdatenGeneral = {
    type = CustomSparkAction
    breakDataFrameLineage = true
  }

  // Benutzt für erste Feeds der Bewegungsdaten
  // Bestimmung welche Partitionen noch benötigt werden, geschieht über ATL Tabelle
  // Sind keine Daten zu verarbeiten, wird abgebrochen
  actionBewegungsdatenInit = {
    type = CustomSparkAction
    executionMode {
      type = PartitionDiffMode
      failCondition = "(size(selectedInputPartitionValues) = 0)" // Fail if selected partition does not exist
      alternativeOutputId = atl_zuglauf_strecke // letzte ATL Tabelle als Vergleich für PartitionDiff verwenden
    }
  }

  // Benutzt für Bewegungsdaten die nicht zu Beginn der Verarbeitungskette stehen
  // Erhalten Partition Values von Vorgänger-Actions
  actionCustomSparkActionGeneral = {
    type = CustomSparkAction
    breakDataFrameLineage = true
    executionMode = ${env.SDLRAW_ATL_EXECUTION_MODE}
  }

}

dataObjects {
  // ANA1
  ana1_formation_footprint = ${default.hiveTable}
  ana1_grundtyp = ${default.hiveTable}
  ana1_fahrtyp_mapping = ${default.hiveTable}
  ana1_grundtyp_mapping = ${default.hiveTable}

  // ANABEL SPEZIELL
  // Verwendet für FirstLoad von stg_positionspunkt_dinar_dgp_plus
  anabel_gtgstrang_plus {
    type = HiveTableDataObject
    table {
      db = app_anabel
      name = dinar_gtgstrang_plus
    }
  }

  // DFA
  dfagis_betriebspunkt {
    type = HiveTableDataObject
    table {
      db = ${shared.dfagis-db}
      name = btl_dfagis_os_betriebspunkt_hist
    }
  }
  dfagis_strecke {
    type = HiveTableDataObject
    table {
      db = ${shared.dfagis-db}
      name = btl_dfagis_os_strecke_hist
    }
  }
  dfagis_linie {
    type = HiveTableDataObject
    table {
      db = ${shared.dfagis-db}
      name = btl_dfagis_os_linie_hist
    }
  }
  dfagis_streckengeometrie {
    type = HiveTableDataObject
    table {
      db = ${shared.dfagis-db}
      name = btl_dfagis_os_streckengeometrie_hist
    }
  }
  dfagis_strecken_gleis_bezug {
    type = HiveTableDataObject
    table {
      db = ${shared.dfagis-db}
      name = btl_dfagis_os_strecken_gleis_bezug
    }
  }

  // DGP
  dgp_netzelemente {
    type = HiveTableDataObject
    table {
      db = ${shared.dgp-db}
      name = btl_dgp_netzelemente
    }
  }

  // DIAMOND
  dmd_gs2gtg = ${default.hiveTableDtPartitioned} {
    table {
      db = ${shared.diamond-db}
      name = "int_dmd_gs2gtg"
    }
  }

  // DINAR
  dinar_gtgstrang {
    type = HiveTableDataObject
    table {
      db = ${shared.dinar-db}
      name = btl_dinar_gtgstrang
    }
  }
  dinar_gtgweiche {
    type = HiveTableDataObject
    table {
      db = ${shared.dinar-db}
      name = btl_dinar_gtgweiche
    }
  }

  // IHPT
  ihpt_tf = ${default.tickTockHiveTableDtPartitioned} {
    table {
      db = ${shared.fos-db}
      name = int_ihpt_fos_tf
    }
    expectedPartitionsCondition = "elements['dt'] >= 20171211"
  }
  ihpt_ft = ${default.hiveTable} {
    table {
      db = ${shared.fos-db}
      name = int_ihpt_fos_fahrtyp
    }
    expectedPartitionsCondition = "elements['dt'] >= 20171211"
  }

  // UNO
  uno_betriebspunkt {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_betriebspunkt
    }
  }
  uno_mitte_ag {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_mitte_ag
    }
  }
  uno_signal {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_signal
    }
  }
  uno_gleiskante {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_gleiskante
    }
  }
  uno_gleisknoten {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_gleisknoten
    }
  }
  uno_gleispunkt {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_gleispunkt
    }
  }
  uno_weichengrenze {
    type = HiveTableDataObject
    table {
      db = ${shared.uno-db}
      name = btl_uno_h_weichengrenze
    }
  }

  // RCS
  rcs_formation = ${default.hiveRcsTableDtPartitioned} {
    table {
      db = ${shared.rcsarchiv-db}
      name = btl_rcsarchiv_formation
    }
  }
  rcs_zuglauf = ${default.hiveRcsTableDtPartitioned} {
    table {
      db = ${shared.rcsarchiv-db}
      name = btl_rcsarchiv_zuglauf
    }
  }
  rcs_fahrweg = ${default.hiveRcsTableDtPartitioned} {
    table {
      db = ${shared.rcsarchiv-db}
      name = btl_rcsarchiv_fahrweg
    }
  }

  // Stammdaten (diese haben im Normalfall keine Partitionierung nach DT)
  stg_gleiskante_clean = ${default.outputStageStammdaten} {
    path = "/uno_h_gleiskante_clean/data/"
    table.name = uno_h_gleiskante_clean
  }
  stg_gleisknoten_clean = ${default.outputStageStammdaten} {
    path = "/uno_h_gleisknoten_clean/data/"
    table.name = uno_h_gleisknoten_clean

  }
  stg_gleispunkt_clean = ${default.outputStageStammdaten} {
    path = "/uno_h_gleispunkt_clean/data/"
    table.name = uno_gleispunkt_clean
  }
  stg_gleiskante_plus = ${default.outputStageStammdatenTickTock} {
    path = "/uno_h_gleiskante_plus/data/"
    table.name = uno_h_gleiskante_plus
  }
  stg_gtgstrang = ${default.outputStageStammdaten} {
    table.primary-key = ["neid_gtgstrang"]
  }
  stg_positionspunkt_dinar_dgp_plus = ${default.outputStageStammdatenTickTock} {
    path = "/dinar_gtgstrang_dgp_plus/data/"
    table.name = "dinar_gtgstrang_dgp_plus"
  }
  stg_betriebspunkt = ${default.outputStageStammdaten}
  stg_strecken_dfa = ${default.outputStageStammdaten}
  stg_befahrbarkeit = ${default.outputStageStammdaten}
  stg_streckenkombination = ${default.outputStageStammdaten}
  stg_strecke_gleis_bezug = ${default.outputStageStammdaten} {
    table.primary-key = ["id_gleisstrang", "gs_position_von", "gueltig_ab"]
  }
  stg_gtg2gleisstrang = ${default.outputStageStammdaten} {
    table.primary-key = ["neid_gtgstrang", "id_gleisstrang", "gueltig_ab"]
  }
  stg_gtg2strecke_pre = ${default.outputStageStammdaten} {
    table.primary-key = ["neid_gtgstrang", "strecke_gtgposition_von", "gueltig_ab"]
  }
  stg_gtg2strecke = ${default.outputStageStammdaten} {
    table.primary-key = ["neid_gtgstrang", "strecke_gtgposition_von", "gueltig_ab"]
  }
  stg_gleiskante_gtgstrang_mapping = ${default.outputStageStammdaten}{
    table.primary-key = ["neid_gtgstrang", "id_gleiskante", "gueltig_ab"]
  }
  stg_gleiskante2gleisstrang = ${default.outputStageStammdaten}
  stg_mag_ignorandum = ${default.outputStageStammdaten}{table.primary-key = ["id_mitte_ag"]}
  stg_mag_strecke = ${default.outputStageStammdaten}{
    table.primary-key = ["id_mitte_ag", "gueltig_ab", "id_gleiskante", "neid_gtgstrang", "strecke_gtgposition_von"]
  }

  stg_positionspunkt = ${default.outputStageStammdatenTickTock} {
    partitions = [zoom]
    acl = ${shared.aclImpala}
  }
  stg_positionspunkt_gleiskante = ${default.outputStageStammdatenTickTock} {
    partitions = [zoom]
    acl = ${shared.aclImpala}
  }
  stg_positionspunkt_gtgstrang = ${default.outputStageStammdatenTickTock} {
    partitions = [zoom]
    acl = ${shared.aclImpala}
  }

  stg_cis_bremsbauart = ${default.hiveTable} {
    table.primary-key = ["datum_prd", "trassenid", "wagennummer"]
    //    partitions = ["datum_prd"] // throws IllegalStateException: (Action~rep_laerm_streckenbelastung) Partition values are empty for mainInput stg_cis_bremsbauart
  }

  git_stammdaten_gefahrgut_bezeichnungen {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/gefahrgut/UN_Bezeichnungen.csv?at=refs%2Fheads%2Fdevelop"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }

  }
  file_stammdaten_gefahrgut_bezeichnungen {
    type = CsvFileDataObject
    path = ${shared.hdfs-home-path}/stammdaten/gefahrgut/UN_Bezeichnungen.csv
    saveMode = Overwrite
    acl = ${default.acl}
    csv-options {
      inferSchema = true
      delimiter = ";"
      escape = "\\"
      header = "true"
      quote = "\""
      encoding = "UTF-8"
    }
  }
  stg_stammdaten_gefahrgut_bezeichnungen = ${default.outputStageStammdaten} {
    table.primary-key = ["UN_Nr"]
    //    TODO: Check schemaMin Defenition. Currently schemaMin is violated:
    //      missingCols=StructField(un_nr,StringType,true)
    //      schemaMin: StructField(un_nr,StringType,true), StructField(bezeichnung_kurz,StringType,true), StructField(Bezeichnung,StringType,true)
    //      schemaDf: StructField(un_nr,IntegerType,true), StructField(bezeichnung_kurz,StringType,true), StructField(Bezeichnung,StringType,true)
    //    schemaMin = "un_nr STRING, bezeichnung_kurz STRING, Bezeichnung STRING"
  }

  git_stammdaten_gefahrgut_leitstoff {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/gefahrgut/UN_Leitstoff_Risiken.csv?at=refs%2Fheads%2Fdevelop"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }

  }
  file_stammdaten_gefahrgut_leitstoff {
    type = CsvFileDataObject
    path = ${shared.hdfs-home-path}/stammdaten/gefahrgut/UN_Leitstoff_Risiken.csv
    saveMode = Overwrite
    acl = ${default.acl}
    csv-options {
      inferSchema = "true"
      delimiter = ";"
      escape = "\\"
      header = "true"
      quote = "\""
      encoding = "UTF-8"
    }
    //schema = "un_nr STRING, leitstoff_umweltrisiken_nr INTEGER, leitstoff_umweltrisiken_bezeichnung STRING, gewichtungsfaktor_umweltrisiken DOUBLE, leitstoff_personenrisiken_nr INTEGER, leitstoff_personenrisiken_bezeichnung STRING, gewichtungsfaktor_personenrisiken DOUBLE,gwk STRING,gueltig_ab TIMESTAMP"
  }
  stg_stammdaten_gefahrgut_leitstoff = ${default.outputStageStammdatenTickTock} {
    table.primary-key = ["un_nr"]
    schemaMin = "un_nr STRING,leitstoff_umweltrisiken_nr INT,leitstoff_umweltrisiken_bezeichnung STRING,gewichtungsfaktor_umweltrisiken DOUBLE,leitstoff_personenrisiken_nr INT,leitstoff_personenrisiken_bezeichnung STRING,gewichtungsfaktor_personenrisiken DOUBLE,gwk STRING,gueltig_ab TIMESTAMP,gueltig_bis TIMESTAMP"
  }

  git_stammdaten_gefahrgut_gefahrgutklassen {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/gefahrgut/UN_Gefahrgutklassen.csv?at=refs%2Fheads%2Fdevelop"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }
  }
  file_stammdaten_gefahrgut_gefahrgutklassen {
    type = CsvFileDataObject
    path = ${shared.hdfs-home-path}/stammdaten/gefahrgut/UN_Gefahrgutklassen.csv
    saveMode = Overwrite
    acl = ${default.acl}
    csv-options {
      inferSchema = true
      delimiter = ";"
      escape = "\\"
      header = "true"
      quote = "\""
      encoding = "UTF-8"
    }
    //schema = "un_nr STRING, gefahrgutklasse Double , gueltig_ab Timestamp"
  }
  stg_stammdaten_gefahrgut_gefahrgutklassen = ${default.outputStageStammdatenTickTock} {
    table.primary-key = ["UN_Nr"]
    schemaMin = "un_nr STRING,gefahrgutklasse DOUBLE,gueltig_ab TIMESTAMP,gueltig_bis TIMESTAMP"
  }

  git_stammdaten_zugkategorie {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/zugkategorie/ZugkategorienANA2.csv?at=refs%2Fheads%2Fdevelop"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }
  }
  file_stammdaten_zugkategorie {
    type = CsvFileDataObject
    path = ${shared.hdfs-home-path}/stammdaten/zugkategorie/ZugkategorienANA2.csv
    saveMode = Overwrite
    csv-options {
      inferSchema = true
      delimiter = ","
      escape = "\\"
      header = "true"
      quote = "\""
      encoding = "UTF-8"
    }
  }
  stg_stammdaten_zugkategorie = ${default.outputStageStammdaten} {
    path = "/stammdaten/zugkategorien/data/"
    table.name = "git_stammdaten_zugkategorie"
    //schema = ""
  }

  git_fzg_stammdaten {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/fahrzeug/Fzgstammdaten.json"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }
  }
  file_fzg_stammdaten {
    type = JsonFileDataObject
    path = ${shared.hdfs-home-path}/stage/anabel/stammdaten_git/data/${shared.loaddate}/fzgstammdaten.json
    saveMode = Overwrite
  }

  git_fzg_stammdaten_config {
    type = WebserviceFileDataObject
    url = "https://code.sbb.ch/projects/KD_BIGDATA/repos/anabel-stammdaten/raw/fahrzeug/Fzgstammdaten.config.json"
    authMode = {
      type = AuthHeaderMode
      secretVariable = "CLEAR#"${shared.git-authentication}
    }
  }
  file_fzg_stammdaten_config {
    type = JsonFileDataObject
    path = ${shared.hdfs-home-path}/stage/anabel/stammdaten_git/data/${shared.loaddate}/fzgstammdaten.config.json
    saveMode = Overwrite
  }
  fzg_stammdaten {
    type = HiveTableDataObject
    // Spezialfall, einzige Stammdaten-Tabelle in diesem Unterordner
    path = ${shared.hdfs-home-path}"/stammdaten/fzg_stammdaten/data"
    table {
      db = ${shared.hive-db}
      name = "git_fzg_stammdaten"
    }
    acl = ${default.acl}
  }

  // Bewegungsdaten
  stg_formation_ihpt = ${default.outputStage}
  stg_formation_rcs = ${default.outputStage}
  stg_formation = ${default.outputStage}
  stg_zuglauf = ${default.outputStage}
  stg_zuglauf_ignorandum = ${default.outputStage}
  stg_zuglauf_strecke = ${default.outputStage}{
    table.primary-key = ["dt", "id_zug", "reihenfolge"]
  }
  stg_zuglauf_strecke_wegfilter = ${default.outputStage}{
    table.primary-key = ["dt", "id_zug", "reihenfolge"]
  }
  stg_fahrweg_gleiskante = ${default.outputStage}{
    table.primary-key = ["dt", "id_zug", "reihenfolge"]
  }
  stg_fahrweg_gtgstrang = ${default.outputStage}{
    table.primary-key = ["dt", "id_zug", "reihenfolge", "id_strecke"]
  }

  // Path für ATL Tabellen muss überschrieben werden
  // weil hier atl_ nicht Teil des Ordner-Namens ist
  atl_gefahrgut = ${default.outputAtl} {
    path = "/gefahrgut/data/"
    table.primary-key = ["dt", "id_zug", "zuglauf_reihenfolge", "position", "un_stoffnummer"]
  }
  atl_zuglauf = ${default.outputAtl} {
    path = "/zuglauf/data/"
  }
  atl_fahrweg_gleiskante = ${default.outputAtl} {
    path = "/fahrweg_gleiskante/data/"
  }
  atl_fahrweg_gtgstrang = ${default.outputAtl} {
    path = "/fahrweg_gtgstrang/data/"
  }
  atl_formation = ${default.outputAtl} {
    table.primary-key = ["dt", "id_formation", "position"]
    path = "/formation/data/"
  }
  atl_zuglauf_strecke = ${default.outputAtl} {
    path = "/zuglauf_strecke/data/"
  }

  reporting_gleisbelastung {
    type = JdbcTableDataObject
    connectionId = jdbcReportingConnection
    table.name = gleisbelastung
    preWriteSql = "call truncate_partition('gleisbelastung','"${shared.dts}"')"
    saveMode = Append
  }
  reporting_streckenbelastung {
    type = JdbcTableDataObject
    connectionId = jdbcReportingConnection
    table.name = streckenbelastung
    preWriteSql = "call truncate_partition('streckenbelastung','"${shared.dts}"')"
    saveMode = Append
  }
  reporting_gefahrengut_strecke {
    type = JdbcTableDataObject
    connectionId = jdbcReportingConnection
    table.name = gefahrengut_strecke
    preWriteSql = "call truncate_partition('gefahrengut_strecke','"${shared.dts}"')"
    saveMode = Append
  }
  rep_gefahrengut_gtg = ${default.outputRep} {
    partitions = [dt]
    table.primary-key = ["dt", "id_zug", "zuglauf_reihenfolge", "position", "un_stoffnummer", "fahrweg_gtg_reihenfolge"]
    path = "/~{id}/data"
  }

  rep_laerm_gleisbelastung = ${default.outputRep} {
    path = "/~{id}/data"
  }
  rep_laerm_streckenbelastung_pre = ${default.outputRep} {
    table.primary-key = ["dt", "id_zug", "reihenfolge", "id_strecke", "formation_pos"]
    path = "/~{id}/data"
  }
  rep_laerm_streckenbelastung = ${default.outputRep} {
    table.primary-key = ["id_strecke", "stunde", "jahr", "monat", "zka_id", "basistyp", "bremsbauart", "bremsbelag", "fahrzeugkategorie"]
    path = "/~{id}/data"
  }
  rep_laerm_zuganzahl = ${default.outputRep} {
    path = "/~{id}/data"
  }

  quality_monitoring_jahr = ${default.outputAtlTickTock} {
    table {
      name = quality_monitoring_jahr
      primary-key = ["dt"]
    }
    partitions = []
  }

  quality_monitoring_tag = ${default.outputAtlTickTock} {
    table {
      name = quality_monitoring_tag
      primary-key = ["dt"]
    }
    partitions = []
    schemaMin = "dt STRING,streckenschaerfe_tag DOUBLE,streckenabfolge_tag DOUBLE,gtgabfolge_tag DOUBLE,gtgschaerfe_tag DOUBLE,gtgfahrwegabschluss_tag DOUBLE,formationsvollstaendigkeit_tag DOUBLE,formationsschaerfe_tag DOUBLE"
  }

  neig_gleisbelastung = ${default.outputNeig}
  neig_streckenbelastung = ${default.outputNeig}
}

actions {
  // STAMMDATEN
  stg_positionspunkt_uno_clean = ${default.actionStammdatenGeneral} {
    inputIds = [uno_gleiskante, uno_gleisknoten, uno_gleispunkt]
    outputIds = [stg_gleiskante_clean, stg_gleisknoten_clean, stg_gleispunkt_clean]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.UNOCleanTransformer
      options = ${default.options} {
        //filter = "id_gleiskante=25897"
      }
    }
    metadata {
      feed = stamm_stg_positionspunkt_uno_clean
    }
  }

  stg_positionspunkt_uno_plus = ${default.actionStammdatenGeneral} {
    inputIds = [uno_weichengrenze, stg_gleisknoten_clean, stg_gleiskante_clean, stg_gleispunkt_clean]
    recursiveInputIds = [stg_gleiskante_plus]
    outputIds = [stg_gleiskante_plus]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.UNOPlusTransformer
      options = ${default.options} {
        //filter = "id_gleiskante=23662"
      }
    }
    metadata {
      feed = stamm_stg_positionspunkt_uno_plus
    }
  }

  stg_betriebspunkt = ${default.actionStammdatenGeneral} {
    inputIds = [dfagis_betriebspunkt, uno_betriebspunkt]
    outputIds = [stg_betriebspunkt]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.BetriebspunktTransformer
      options = ${default.options}
    }
    metadata {
      feed = stamm_stg_betriebspunkt
    }
  }

  stg_gtgstrang = ${default.actionStammdatenGeneral} {
    inputIds = [dinar_gtgstrang]
    outputIds = [stg_gtgstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.GtgTransformer
      options = ${default.options} {
        //filter-gtgStrang = "ne_id like '%e-9fb4-11e7-bcdf-d3fb3f0ce5f7'"
      }
    }
    metadata {
      feed = stamm_stg_gtgstrang
    }
  }

  stg_strecken_dfa = ${default.actionStammdatenGeneral} {
    inputIds = [stg_betriebspunkt, dfagis_strecke, dfagis_linie, dfagis_streckengeometrie]
    outputIds = [stg_strecken_dfa]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.StreckenDfaTransformer
      options = ${default.options} {
        //filter-bp = "bp in ('BWMS','JKLM','BN')"
        //filter-linie = "attr_liniennummer in (452)"
      }
    }
    metadata {
      feed = stamm_stg_strecken_dfa
    }
  }

  stg_befahrbarkeit = ${default.actionStammdatenGeneral} {
    inputIds = [stg_strecken_dfa]
    outputIds = [stg_befahrbarkeit]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.befahrbarkeit.BefahrbarkeitTransformer
      options = ${default.options}
    }
    metadata {
      feed = stamm_stg_befahrbarkeit
    }
  }

  stg_streckenkombination = ${default.actionStammdatenGeneral} {
    inputIds = [stg_befahrbarkeit, stg_strecken_dfa]
    outputIds = [stg_streckenkombination]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.StreckenkombinationTransformer
      options = ${default.options} {
        max-tiefe = 4 // required parameter. If more than 7 then Exception java.lang.OutOfMemoryError: Java heap space
        //filter-linie = "linie in (650)"
      }
    }
    metadata {
      feed = stamm_stg_streckenkombination
    }
  }

  stg_strecke_gleis_bezug = ${default.actionStammdatenGeneral} {
    inputIds = [stg_strecken_dfa, dfagis_strecken_gleis_bezug]
    outputIds = [stg_strecke_gleis_bezug]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.StreckeGleisTransformer
      options = ${default.options}
    }
    metadata {
      feed = stamm_stg_strecke_gleis_bezug
    }
  }

  stg_positionspunkt_dinar_dgp_plus = ${default.actionStammdatenGeneral} {
    inputIds = [dgp_netzelemente, dinar_gtgstrang, dinar_gtgweiche, anabel_gtgstrang_plus]
    recursiveInputIds = [stg_positionspunkt_dinar_dgp_plus]
    outputIds = [stg_positionspunkt_dinar_dgp_plus]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.DinarDGPPlusTransformer
      options = ${default.options} {
        //filter_neid_gtgstrang = "neid_gtgstrang='03ef13eb-9fbb-11e7-bcdf-d3fb3f0ce5f7'"
        //filter_netzelement="netzelement_id='03ef13eb-9fbb-11e7-bcdf-d3fb3f0ce5f7'"
      }
    }
    metadata {
      feed = stamm_stg_positionspunkt_dinar_dgp_plus
    }
  }

  stg_positionspunkt_gleiskante = ${default.actionStammdatenGeneral} {
    inputIds = [stg_gleiskante_plus]
    recursiveInputIds = [stg_positionspunkt, stg_positionspunkt_gleiskante]
    outputIds = [stg_positionspunkt, stg_positionspunkt_gleiskante]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.PositionspunktGleiskanteTransformer
      options = ${default.options} {
        //filter = "id_gleiskante = 38586"
        //max-gleiskante-ts-created = "2000-01-01 00:00:00"
      }
    }
    metadata {
      feed = stamm_stg_positionspunkt_gleiskante
    }
  }

  stg_gleiskante_gtgstrang_mapping = ${default.actionStammdatenGeneral} {
    inputIds = [stg_positionspunkt_dinar_dgp_plus, stg_gleiskante_plus, stg_positionspunkt_gleiskante, stg_positionspunkt_gtgstrang]
    outputIds = [stg_gleiskante_gtgstrang_mapping]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.GleiskanteGTGStrangMappingTransformer
      options = ${default.options} {
        //        filter-gk = "id_gleiskante in (109177,109182,109183,48498,24547,24545)"
        //        filter-gtg = "neid_gtgstrang in ('bc03abcb-9fba-11e7-bcdf-d3fb3f0ce5f7','bc2145f0-9fba-11e7-bcdf-d3fb3f0ce5f7','bc0902fc-9fba-11e7-bcdf-d3fb3f0ce5f7','bbf2bbd8-9fba-11e7-bcdf-d3fb3f0ce5f7','bbfe2d8a-9fba-11e7-bcdf-d3fb3f0ce5f7')"
      }
    }
    metadata {
      feed = stamm_stg_gleiskante_gtgstrang_mapping
    }
  }

  stg_gtg2gleisstrang = ${default.actionStammdatenGeneral} {
    inputIds = [stg_gtgstrang, dmd_gs2gtg]
    outputIds = [stg_gtg2gleisstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.Gtg2gsTransformer
      options = ${default.options} {
        //filter-gtgStrang = "idgtg = '2404b08c-9fba-11e7-bcdf-d3fb3f0ce5f7'"
      }
    }
    metadata {
      feed = stamm_stg_gtg2gleisstrang
    }
  }

  stg_gtg2strecke = ${default.actionStammdatenGeneral} {
    inputIds = [stg_strecken_dfa, stg_strecke_gleis_bezug, stg_gtg2gleisstrang]
    outputIds = [stg_gtg2strecke_pre, stg_gtg2strecke]
    transformer = {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.Gtg2StreckeTransformer
      options = ${default.options} {
        //filter-gtgStrang = "neid_gtgstrang in ('306d36cd-9fb5-11e7-bcdf-d3fb3f0ce5f7','98ab8343-9fba-11e7-bcdf-d3fb3f0ce5f7')"
        //filter-gleisStrang = "id_gleisstrang in (269601)"//18422,295375,329208,331144,331145,331150,331152,331160,331161,331162,331172,331173,331174,331175,332608,334367)"
      }
    }
    metadata {
      feed = stamm_stg_gtg2strecke
    }
  }

  stg_gleiskante2gleisstrang = ${default.actionStammdatenGeneral} {
    inputIds = [stg_strecken_dfa, stg_gleiskante_gtgstrang_mapping, stg_gtg2gleisstrang, stg_strecke_gleis_bezug]
    outputIds = [stg_gleiskante2gleisstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.Gk2gsTransformer
      options = ${default.options} {
        //filter-gtgStrang = "neid_gtgstrang = '69fc715d-9fb8-11e7-bcdf-d3fb3f0ce5f7'"
        //filter-gk="id_gleiskante=34069"
      }
    }
    metadata {
      feed = stamm_stg_gleiskante2gleisstrang
    }
  }

  stg_mag_strecke = ${default.actionStammdatenGeneral} {
    inputIds = [stg_betriebspunkt, stg_gleiskante_gtgstrang_mapping, stg_gtg2strecke, uno_mitte_ag]
    outputIds = [stg_mag_strecke]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.Mag2StreckeTransformer
      options = ${default.options} {
        //filter-mitte_ag = "id_mitte_ag in (8430)"
      }
    }
    metadata {
      feed = stamm_stg_mag_strecke
    }
  }

  stg_mag_ignorandum = ${default.actionStammdatenGeneral} {
    inputIds = [stg_mag_strecke]
    outputIds = [stg_mag_ignorandum]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.MagIgnorandumTransformer
      options = ${default.options}
    }
    metadata {
      feed = stamm_stg_mag_ignorandum
    }
  }

  stg_positionspunkt_gtgstrang = ${default.actionStammdatenGeneral} {
    inputIds = [stg_positionspunkt_dinar_dgp_plus, stg_positionspunkt]
    recursiveInputIds = [stg_positionspunkt_gtgstrang]
    outputIds = [stg_positionspunkt_gtgstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.positionspunkt.PositionspunktGTGStrangTransformer
      options = ${default.options} {
        //filter = "neid_gtgstrang in ('55aaea81-9fb9-11e7-bcdf-d3fb3f0ce5f7','566bc9a3-9fb9-11e7-bcdf-d3fb3f0ce5f7','568433a7-9fb9-11e7-bcdf-d3fb3f0ce5f7')"
        //max-gleiskante-ts-created = "1999-01-01 00:00:00"
      }
      runtimeOptions = {
        executionPhase = "executionPhase"
      }
    }
    metadata {
      feed = stamm_stg_positionspunkt_gtgstrang
    }
  }

  // PERIODISCHE STAMMDATENLOADS
  file_stammdaten_gefahrgut_bezeichnungen {
    type = FileTransferAction
    inputId = git_stammdaten_gefahrgut_bezeichnungen
    outputId = file_stammdaten_gefahrgut_bezeichnungen
    metadata {
      feed = gefahrgut_bezeichnungen_file
    }
  }
  stg_stammdaten_gefahrgut_bezeichnungen {
    type = CustomSparkAction
    inputIds = [file_stammdaten_gefahrgut_bezeichnungen]
    outputIds = [stg_stammdaten_gefahrgut_bezeichnungen]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stammdaten.GefahrgutBezeichnungenTransformer
      options = ${default.options}
    }
    metadata {
      feed = gefahrgut_bezeichnungen_stg
    }
  }

  file_stammdaten_gefahrgut_leitstoff {
    type = FileTransferAction
    inputId = git_stammdaten_gefahrgut_leitstoff
    outputId = file_stammdaten_gefahrgut_leitstoff
    metadata {
      feed = gefahrgut_leitstoff_file
    }
  }
  stg_stammdaten_gefahrgut_leitstoff {
    type = CustomSparkAction
    inputIds = [file_stammdaten_gefahrgut_leitstoff]
    recursiveInputIds = [stg_stammdaten_gefahrgut_leitstoff]
    outputIds = [stg_stammdaten_gefahrgut_leitstoff]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stammdaten.GefahrgutLeitstoffRisikenTransformer
      options = ${default.options}
    }
    metadata {
      feed = gefahrgut_leitstoff_stg
    }
  }

  file_stammdaten_gefahrgut_gefahrgutklassen {
    type = FileTransferAction
    inputId = git_stammdaten_gefahrgut_gefahrgutklassen
    outputId = file_stammdaten_gefahrgut_gefahrgutklassen
    metadata {
      feed = gefahrgut_gefahrgutklassen_file
    }
  }
  stg_stammdaten_gefahrgut_gefahrgutklassen {
    type = CustomSparkAction
    inputIds = [file_stammdaten_gefahrgut_gefahrgutklassen]
    recursiveInputIds = [stg_stammdaten_gefahrgut_gefahrgutklassen]
    outputIds = [stg_stammdaten_gefahrgut_gefahrgutklassen]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stammdaten.GefahrgutGefahrgutklassenTransformer
      options = ${default.options}
    }
    metadata {
      feed = gefahrgut_gefahrgutklassen_stg
    }
  }


  file_stammdaten_zugkategorie {
    type = FileTransferAction
    inputId = git_stammdaten_zugkategorie
    outputId = file_stammdaten_zugkategorie
    metadata {
      feed = zugkategorie_file
    }
  }
  stg_stammdaten_zugkategorie {
    type = CopyAction
    inputId = file_stammdaten_zugkategorie
    outputId = stg_stammdaten_zugkategorie
    metadata {
      feed = zugkategorie_stg
    }
  }

  file_fzg_stammdaten {
    type = FileTransferAction
    inputId = git_fzg_stammdaten
    outputId = file_fzg_stammdaten
    metadata {
      feed = fzg_stammdaten_file
    }
  }
  file_fzg_stammdaten_config {
    type = FileTransferAction
    inputId = git_fzg_stammdaten_config
    outputId = file_fzg_stammdaten_config
    metadata {
      feed = fzg_stammdaten_file
    }
  }
  // ACHTUNG Murks:
  // InputIds fuer Lineage. StammdatenTransformer liest die Daten nochmals selbst ein
  // Weil Pfad auch noch LOADDATE beinhaltet, duerfen fzg_stammdaten_file
  // und fzg_stammdaten_stg nicht gleichzeitig gestartet werden (zuerst _file, dann _stg)
  fzg_stammdaten {
    type = CustomSparkAction
    inputIds = [file_fzg_stammdaten, file_fzg_stammdaten_config]
    outputIds = [fzg_stammdaten]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stammdaten.StammdatenTransformer
      options = ${default.options} {
        loaddate = ${shared.loaddate}
        hdfs-dir = ${shared.hdfs-home-path}/stage/anabel/stammdaten_git/data
      }
    }
    metadata {
      feed = fzg_stammdaten_stg
    }
  }

  neig_gleisbelastung {
    type = CustomSparkAction
    inputIds = [stg_gtgstrang, atl_fahrweg_gtgstrang, atl_formation, atl_zuglauf, stg_stammdaten_zugkategorie]
    recursiveInputIds = [neig_gleisbelastung]
    outputIds = [neig_gleisbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.neig.NeigGleisbelastungTransformer
      options = ${default.options} {
        // filter-gtg = "neid_gtgstrang in ('43977e6a-9fb8-11e7-bcdf-d3fb3f0ce5f7','0001c98a-9fba-11e7-bcdf-d3fb3f0ce5f7')"
        // filter-zug = "id_zug in (221609942,221617594)"
      }
    }
    metadata {
      feed = neig_gleisbelastung
    }
  }
  neig_streckenbelastung {
    type = CustomSparkAction
    inputIds = [stg_strecken_dfa, atl_formation, atl_zuglauf_strecke, atl_zuglauf, stg_stammdaten_zugkategorie]
    recursiveInputIds = [neig_streckenbelastung]
    outputIds = [neig_streckenbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.neig.NeigStreckenbelastungTransformer
      options = ${default.options} {
        //filter-strecke = "id_strecke in (4051,4383)"
        //filter-zug = "id_zug = 221665942"
      }
    }
    metadata {
      feed = neig_streckenbelastung
    }
  }

  // BEWEGUNGSDATEN
  stg_formation_rcs = ${default.actionBewegungsdatenInit} {
    inputIds = [rcs_formation, ana1_formation_footprint, ana1_grundtyp, ana1_fahrtyp_mapping, ana1_grundtyp_mapping, uno_betriebspunkt, uno_mitte_ag, rcs_zuglauf]
    mainInputId = rcs_formation
    outputIds = [stg_formation_rcs]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.formation.RCSTransformer
      options = ${default.options} {
        schiebelok-bps = "ER,GOE,AI,BEL,SPAO,TH,SP,KA,GO,FERD,BR,DOFS"
        //filter = "id_formation in (104338681,104338682)"
      }
    }
    metadata {
      feed = bew_stg_formation_rcs
    }
  }

  stg_formation_ihpt = ${default.actionBewegungsdatenInit} {
    inputIds = [ihpt_tf]
    outputIds = [stg_formation_ihpt]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.formation.IHPTTransformer
      options = ${default.options} {
        //filter = "zugidentifikationtag.trassenid='959-002'"
      }
    }
    metadata {
      feed = bew_stg_formation_ihpt
    }
  }

  stg_formation = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_formation_ihpt, stg_formation_rcs]
    outputIds = [stg_formation]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.formation.JoinedTransformer
      options = ${default.options} {
        //filter = "trassenid='41055-001'"
      }
    }
    metadata {
      feed = bew_stg_formation
    }
  }

  stg_zuglauf = ${default.actionBewegungsdatenInit} {
    inputIds = [rcs_zuglauf, uno_mitte_ag, uno_signal]
    outputIds = [stg_zuglauf]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.ZuglaufTransformer
      options = ${default.options} {
        // filter-gk = "id_gleiskante in (34896)"
        // filter-zug = "id_zug = 2535334"

      }
    }
    metadata {
      feed = bew_stg_zuglauf
    }
  }

  stg_zuglauf_ignorandum = ${default.actionBewegungsdatenInit} {
    inputIds = [rcs_zuglauf, stg_betriebspunkt, stg_mag_ignorandum]
    outputIds = [stg_zuglauf_ignorandum]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.ZuglaufIgnorandumTransformer
      options = ${default.options} {
        //filter-zug = "id_zug = 1637016"
      }
    }
    metadata {
      feed = bew_stg_zuglauf_ignorandum
    }
  }

  stg_zuglauf_strecke = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_streckenkombination, stg_strecken_dfa, stg_zuglauf_ignorandum]
    outputIds = [stg_zuglauf_strecke]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.ZuglaufStreckeTransformer
      options = ${default.options} {
        //filter-zug = "id_zug = 5725869"
      }
    }
    metadata {
      feed = bew_stg_zuglauf_strecke
    }
  }

  stg_zuglauf_strecke_wegfilter = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_fahrweg_gtgstrang, stg_strecken_dfa, stg_zuglauf_strecke]
    outputIds = [stg_zuglauf_strecke_wegfilter]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.ZuglaufStreckeWegfilterTransformer
      options = ${default.options} {
        //filter-zug = "id_zug = 5725869"
      }
    }
    metadata {
      feed = bew_stg_zuglauf_strecke_wegfilter
    }
  }

  stg_fahrweg_gleiskante = ${default.actionCustomSparkActionGeneral} {
    inputIds = [rcs_fahrweg, stg_zuglauf]
    outputIds = [stg_fahrweg_gleiskante]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.FahrwegGkTransformer
      options = ${default.options} {
        //        filter-zug = "id_zug=1615727"
        //        filter-gk = "id_gleiskante in (34896)"
      }
    }
    metadata {
      feed = bew_stg_fahrweg_gleiskante
    }
  }

  stg_fahrweg_gtgstrang = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_fahrweg_gleiskante, stg_gleiskante_clean, stg_gleiskante_gtgstrang_mapping, stg_gtg2strecke, stg_positionspunkt_dinar_dgp_plus]
    outputIds = [stg_fahrweg_gtgstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.stg.zuglauf.FahrwegGtgTransformer
      options = ${default.options} {
        //        filter-zug = "id_zug=2184921"
        //        filter-gk = "id_gleiskante in(34896)"
        //        filter-gtg = "neid_gtgstrang in ('43977e6a-9fb8-11e7-bcdf-d3fb3f0ce5f7')"
      }
    }
    metadata {
      feed = bew_stg_fahrweg_gtgstrang
    }
  }

  atl_formation = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_zuglauf, stg_formation]
    outputIds = [atl_formation]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLFormationTransformer
      options = ${default.options} {
        //filter = "trassenid='34089-001'"
      }
    }
    metadata {
      feed = bew_atl_formation
    }
  }

  atl_gefahrgut = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_formation, atl_zuglauf, stg_stammdaten_zugkategorie,
      stg_stammdaten_gefahrgut_bezeichnungen, stg_stammdaten_gefahrgut_gefahrgutklassen, stg_stammdaten_gefahrgut_leitstoff]
    outputIds = [atl_gefahrgut]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLGefahrgutTransformer
      options = ${default.options} {
        //filter-formation = "id_formation between 1343540 and 1343540"
        //filter-zug = "id_zug in (1816921,1855443)"
      }
    }
    metadata {
      feed = bew_atl_gefahrgut
    }
  }

  atl_zuglauf = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_zuglauf]
    outputIds = [atl_zuglauf]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLZuglaufTransformer
      options = ${default.options} {
        //filter = "trassenid='34089-001'"
      }
    }
    metadata {
      feed = bew_atl_zuglauf
    }
  }

  atl_fahrweg_gleiskante = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_fahrweg_gleiskante]
    outputIds = [atl_fahrweg_gleiskante]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLFahrwegGleiskanteTransformer
      options = ${default.options} {
        //filter = "trassenid='34089-001'"
      }
    }
    metadata {
      feed = bew_atl_fahrweg_gleiskante
    }
  }

  atl_fahrweg_gtgstrang = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_fahrweg_gtgstrang]
    outputIds = [atl_fahrweg_gtgstrang]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLFahrwegGtgstrangTransformer
      options = ${default.options} {
        //filter = "trassenid='34089-001'"
      }
    }
    metadata {
      feed = bew_atl_fahrweg_gtgstrang
    }
  }

  atl_zuglauf_strecke = ${default.actionCustomSparkActionGeneral} {
    inputIds = [stg_betriebspunkt, stg_zuglauf_strecke_wegfilter]
    outputIds = [atl_zuglauf_strecke]
    transformer {
      class-name = ch.sbb.bigdata.anabel.atl.ATLZuglaufStreckeTransformer
      options = ${default.options} {
        //filter-zug = "id_zug = 1746183"
      }
    }
    metadata {
      feed = bew_atl_zuglauf_strecke
    }
  }

  // Reporting feeds for Oracle
  reporting_gleisbelastung = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_fahrweg_gtgstrang, atl_formation, atl_zuglauf, stg_stammdaten_zugkategorie]
    outputIds = [reporting_gleisbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.ReportingGleisbelastungTransformer
      options = ${default.options} {
        // Anzahl paralleler JDBC Schreibprozesse (gesteuert über Anzahl Partitionen des Dataframes)
        jdbc-output-partitions = 3
      }
    }
    metadata {
      feed = bew_reporting_gleisbelastung
    }
  }
  reporting_streckenbelastung = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_formation, atl_zuglauf_strecke, atl_zuglauf, uno_betriebspunkt, stg_stammdaten_zugkategorie]
    outputIds = [reporting_streckenbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.ReportingStreckenbelastungTransformer
      options = ${default.options} {
        // Anzahl paralleler JDBC Schreibprozesse (gesteuert über Anzahl Partitionen des Dataframes)
        jdbc-output-partitions = 3
      }
    }
    metadata {
      feed = bew_reporting_streckenbelastung
    }
  }
  reporting_gefahrengut_strecke = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_gefahrgut, atl_zuglauf_strecke]
    outputIds = [reporting_gefahrengut_strecke]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.gefahrgut.RepGefahrengutStreckeTransformer
      options = ${default.options} {
        //filter-formation = "id_formation between 1343540 and 1343540"
        //filter-zug = "id_zug in (1816921,1855443)"
      }
    }
    metadata {
      feed = bew_reporting_gefahrengut_strecke
    }
  }

  quality_monitoring_jahr = ${default.actionCustomSparkActionGeneral} {
    inputIds = [quality_monitoring_tag]
    outputIds = [quality_monitoring_jahr]
    recursiveInputIds = [quality_monitoring_jahr]
    executionMode = null
    transformer {
      class-name = ch.sbb.bigdata.anabel.monitoring.MonitoringJahrTransformer
      options = ${default.options}
    }
    executionMode = null
    metadata {
      feed = quality_monitoring_jahr
    }
  }
  quality_monitoring_tag = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_zuglauf_strecke, atl_fahrweg_gtgstrang, atl_zuglauf, atl_formation]
    outputIds = [quality_monitoring_tag]
    recursiveInputIds = [quality_monitoring_tag]
    transformer {
      class-name = ch.sbb.bigdata.anabel.monitoring.MonitoringTagTransformer
      options = ${default.options}
      runtimeOptions = {executionPhase = "executionPhase"}
    }
    executionMode = null
    metadata {
      feed = quality_monitoring_tag
    }
  }

  // SONSTIGE FEEDS
  rep_laerm_gleisbelastung = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_fahrweg_gtgstrang, atl_formation, atl_zuglauf]
    outputIds = [rep_laerm_gleisbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.laerm.LaermreportingGleisbelastungTransformer
      options = ${default.options} {
        //filter-gtgstrang = "neid_gtgstrang in ('568433a7-9fb9-11e7-bcdf-d3fb3f0ce5f7','69fc715d-9fb8-11e7-bcdf-d3fb3f0ce5f7')"
        //filter-zug = "id_zug in (858775,221613638)"
      }
    }
    metadata {
      feed = rep_laerm_gleisbelastung
    }
  }
  rep_laerm_streckenbelastung = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_formation, atl_zuglauf, atl_zuglauf_strecke, ihpt_ft, stg_cis_bremsbauart]
    outputIds = [rep_laerm_streckenbelastung_pre, rep_laerm_streckenbelastung]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.laerm.LaermreportingStreckenbelastungTransformer
      options = ${default.options} {
        //        filter-zug = "id_zug = 1785395"
        //        filter-fmt = "id_formation = 1253583"
        //        filter-strecke = "id_strecke = 2535"
      }
    }
    metadata {
      feed = rep_laerm_streckenbelastung
    }
  }
  rep_laerm_zuganzahl = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_zuglauf, atl_zuglauf_strecke]
    outputIds = [rep_laerm_zuganzahl]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.laerm.LaermreportingZuganzahlTransformer
      options = ${default.options} {
        //filter-zug = "id_zug in (858775,221613638)"
      }
    }
    metadata {
      feed = rep_laerm_zuganzahl
    }
  }
  rep_gefahrengut_gtg = ${default.actionCustomSparkActionGeneral} {
    inputIds = [atl_gefahrgut, atl_fahrweg_gtgstrang]
    outputIds = [rep_gefahrengut_gtg]
    transformer {
      class-name = ch.sbb.bigdata.anabel.reporting.gefahrgut.RepGefahrengutGtgTransformer
      options = ${default.options} {
        //filter-formation = "id_formation between 1343540 and 1343540"
        //filter-zug = "id_zug in (1816921,1855443)"
      }
    }
    metadata {
      feed = rep_gefahrengut_gtg
    }
  }
}